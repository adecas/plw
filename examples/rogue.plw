function min(a integer, b integer) integer begin
	if a < b then
		return a;
	end if;
	return b;
end min;

function max(a integer, b integer) integer begin
	if a > b then
		return a;
	end if;
	return b;
end max;

type point {
	x integer,
	y integer
};

type rect {
	x1 integer,
	y1 integer,
	x2 integer,
	y2 integer
};

function point_in_array(p point, a [point]) boolean begin
	for i in 0 .. length(a) - 1 loop
		if a[i] = p then
			return true;
		end if;
	end loop;
	return false;
end point_in_array;

function make_rect(x integer, y integer, w integer, h integer) rect begin
	return {x1: x, y1: y, x2: x + w, y2: y + h} as rect;
end make_rect;

function intersect(r1 rect, r2 rect) boolean begin
	return r1.x1 <= r2.x2 and r1.x2 >= r2.x1 and r1.y1 <= r2.y2 and r1.y2 >= r2.y1;
end intersect;

function center(r rect) point begin
	return {x: (r.x1 + r.x2) / 2, y: (r.y1 + r.y2) / 2} as point; 
end center;

generator line_dots(x1 integer, y1 integer, x2 integer, y2 integer) {x integer, y integer} begin
    var dx := abs(x2 - x1);
    var sx := case when x1 < x2 then 1 else -1 end;
    var dy := -abs(y2 - y1);
    var sy := case when y1 < y2 then 1 else -1 end;
    var error := dx + dy;
    var again := true;
    while again loop
        yield {x: x1, y: y1};
        if x1 = x2 and y1 = y2 then
        	again := false;
       	else
		    var e2 := 2 * error;
		    if e2 >= dy then
		        if x1 = x2 then
		        	again := false;
		        else
		        	error := error + dy;
		        	x1 := x1 + sx;
		        end if;
		    end if;
		    if e2 <= dx then
		        if y1 = y2 then
		        	again := false;
		        else
		        	error := error + dx;
		        	y1 := y1 + sy;
		        end if;
		    end if;
		end if;
    end loop;
end line_dots;

const GLYPH_SPACE := ' ';
const GLYPH_PLAYER := '@';
const GLYPH_WALL := '#';
const GLYPH_FLOOR := '.';

const CHAR_UP := char_code('i', 0) as char;
const CHAR_DOWN := char_code('k', 0) as char;
const CHAR_LEFT := char_code('j', 0) as char;
const CHAR_RIGHT := char_code('l', 0) as char;
const CHAR_QUIT := char_code('x', 0) as char;
const CHAR_UPRIGHT := char_code('o', 0) as char;
const CHAR_UPLEFT := char_code('u', 0) as char;
const CHAR_DOWNRIGHT := char_code(';', 0) as char;
const CHAR_DOWNLEFT := char_code(',', 0) as char;
const CHAR_PICKUP := char_code(' ', 0) as char;
const CHAR_INVENTORY := char_code('y', 0) as char;


const ANSI_CR := text([13 as char]);
const ANSI_LF := text([10 as char]);
const ANSI_CSI := text([27 as char]) || '[';
const ANSI_CLEAR_TERMINAL := ANSI_CSI || '0;0H' || ANSI_CSI || 'J';
const ANSI_HIDE_CURSOR := ANSI_CSI || '?25l';
const ANSI_BLACK := '0';
const ANSI_RED := '1';
const ANSI_GREEN := '2';
const ANSI_YELLOW := '3';
const ANSI_BLUE := '4';
const ANSI_MAGENTA := '5';
const ANSI_CYAN := '6';
const ANSI_WHITE := '7';

function ansi_color(fg_color text, bg_color text) text begin
	return ANSI_CSI || '3' || fg_color || ';4' || bg_color || 'm';
end ansi_color;

type screen_cell {
	glyph text,
	fg_color text,
	bg_color text
};

const EMPTY_SCREEN_CELL := {glyph: GLYPH_SPACE, fg_color: ANSI_WHITE, bg_color: ANSI_BLACK} as screen_cell;
const FLOOR_SCREEN_CELL := {glyph: GLYPH_FLOOR, fg_color: ANSI_BLUE, bg_color: ANSI_BLACK} as screen_cell;
const WALL_SCREEN_CELL := {glyph: GLYPH_WALL, fg_color: ANSI_GREEN, bg_color: ANSI_BLACK} as screen_cell;

type entity_position variant(none, some point);
type entity_move variant(none, some point);
type entity_display variant(none, some {glyph text, fg_color text, bg_color text});
type entity_viewrange variant(none, some {range integer, flags [[boolean]], dirty boolean});
type entity_combatstat variant(none, some {max_hp integer, hp integer, defense integer, power integer});
type entity_item variant(none, some {owner_id integer});
type entity_potion variant(none, some {hp integer});

type entity {
	name text,
	is_active boolean,
	position entity_position,
	display entity_display,
	viewrange entity_viewrange,
	combat_stat entity_combatstat,
	is_monster boolean,
	blocks_tile boolean, 
	item entity_item,
	potion entity_potion
};


procedure print_visibility_flags(flags [[boolean]]) begin
	for y in 0..length(flags) - 1 loop
		var line := '';
		for x in 0..length(flags[y]) - 1 loop
			line := line || case when flags[y][x] then 'X' else '.' end;
		end loop;
		print(line);
	end loop;
end print_visibility_flags;

function in_viewrange(p point, entity entity) boolean begin
	kindof entity.viewrange when some(vr) then
		kindof entity.position when some(pos) then
			if p.x >= pos.x - vr.range and
			   p.x <= pos.x + vr.range and
			   p.y >= pos.y - vr.range and
			   p.y <= pos.y + vr.range
			then
				var rel_x := vr.range + p.x - pos.x;
				var rel_y := vr.range + p.y - pos.y;
				if rel_y < 0 or rel_y >= length(vr.flags) or
				   rel_x < 0 or rel_x >= length(vr.flags[rel_y])
				then
					return false;
				end if;
				return vr.flags[rel_y][rel_x];
			end if;
			return false;
		end;
	end;
	return false;
end in_viewrange;

const SCREEN_WIDTH := 130;
const SCREEN_HEIGHT := 30;

const MAX_MESSAGES := 20;

procedure add_message(ctx messages [text], msg text) begin
	if length(messages) = MAX_MESSAGES then
		messages := messages[1 .. MAX_MESSAGES - 1];
	end if;
	messages := messages || [msg];
end add_message;

type tile_type variant(floor, wall);

type map {
	tiles [[tile_type]],
	revealed_tiles [[boolean]],
	visible_tiles [[boolean]],
	rooms [rect],
	width integer,
	height integer,
	blocking_entities [[integer]],
	nonblocking_entities [[integer]]
};

function tiles_with_room(tiles [[tile_type]], room rect) [[tile_type]] begin
	for y in room.y1 + 1 .. room.y2  loop
        for x in room.x1 + 1 .. room.x2 loop
            tiles[y][x] := tile_type_floor();
        end loop;
    end loop;
    return tiles;
end tiles_with_room;

function tiles_with_horizontal_tunnel(tiles [[tile_type]], x1 integer, x2 integer, y integer) [[tile_type]] begin
    for x in min(x1, x2) .. max(x1, x2) loop
		tiles[y][x] := tile_type_floor();
    end loop;
    return tiles;
end tiles_with_horizontal_tunnel;

function tiles_with_vertical_tunnel(tiles [[tile_type]], y1 integer, y2 integer, x integer) [[tile_type]] begin
    for y in min(y1, y2) .. max(y1, y2) loop
		tiles[y][x] := tile_type_floor();
	end loop;
	return tiles;
end tiles_with_vertical_tunnel;

function make_map(width integer, height integer) map begin
	var tiles := tile_type_wall() ** width ** height;
	var revealed_tiles := false ** width ** height;
	var visible_tiles := false ** width ** height;
	var blocking_entities := -1 ** width ** height;
	var nonblocking_entities := -1 ** width ** height;
	var rooms := [] as [rect];
    const MAX_ROOMS := 15;
    const MIN_SIZE := 6;
    const MAX_SIZE := 10;
    for i in 0 .. MAX_ROOMS - 1 loop
        var w := random(MIN_SIZE, MAX_SIZE);
        var h := random(MIN_SIZE, MAX_SIZE);
        var x := random(1, width - w - 1) - 1;
        var y := random(1, height - h - 1) - 1;
        var new_room := make_rect(x, y, w, h);
        var ok := true;
        for j in 0 .. length(rooms) - 1 loop
            if intersect(new_room, rooms[j]) then
            	ok := false;
            end if;
        end loop;
        if ok then
            tiles := tiles_with_room(tiles, new_room);
            if length(rooms) > 0 then
				var new_center := center(new_room);
        		var prev_center := center(rooms[length(rooms) - 1]);
				if random(0, 2) = 1 then
            		tiles := tiles_with_horizontal_tunnel(tiles, prev_center.x, new_center.x, prev_center.y);
            		tiles := tiles_with_vertical_tunnel(tiles, prev_center.y, new_center.y, new_center.x);
				else
            		tiles := tiles_with_vertical_tunnel(tiles, prev_center.y, new_center.y, prev_center.x);
            		tiles := tiles_with_horizontal_tunnel(tiles, prev_center.x, new_center.x, new_center.y);
            	end if;
			end if;
            rooms := rooms || [new_room];            
        end if;
    end loop;
	return {
		tiles: tiles,
		revealed_tiles: revealed_tiles,
		visible_tiles: visible_tiles,
		rooms: rooms,
		width: width,
		height: height,
		blocking_entities: blocking_entities,
		nonblocking_entities: nonblocking_entities
	} as map;
end make_map;


function map_is_blocked(map map, pos point) boolean begin
	return map.tiles[pos.y][pos.x] = tile_type_wall() or map.blocking_entities[pos.y][pos.x] >= 0;
end map_is_blocked;

function visible_tile_flags(tiles [[tile_type]], x integer, y integer, range integer) [[boolean]] begin
	var flags := false ** (2 * range + 1) ** (2 * range + 1);
	for dir in 1..4 loop
		for i in 0 .. range * 2 loop
			var border_x := case when dir = 1 or dir = 3 then i when dir = 2 then 2 * range else 0 end;
			var border_y := case when dir = 2 or dir = 4 then i when dir = 3 then 2 * range else 0 end;
			for d in line_dots(range, range, border_x, border_y) loop
				flags[d.y][d.x] := true;
				exit when tiles[y - range + d.y][x - range + d.x] = tile_type_wall();
				if d.x > 0 then
					flags[d.y][d.x - 1] := true;
				end if;
				if d.x < 2 * range then
					flags[d.y][d.x + 1] := true;
				end if;
				if d.y > 0 then
					flags[d.y - 1][d.x] := true;
				end if;
				if d.y < 2 * range then
					flags[d.y + 1][d.x] := true;
				end if;
			end loop;
		end loop;
	end loop;
	return flags;
end visible_tile_flags;

generator map_neighbors(map map, p point) point begin
	if p.y > 0 then
		yield {x: p.x, y: p.y - 1} as point;
	end if;
	if p.x < map.width - 1 then
		yield {x: p.x + 1, y: p.y} as point;
	end if;
	if p.y < map.height - 1 then
		yield {x: p.x, y: p.y + 1} as point;
	end if;
	if p.x > 0 then
		yield {x: p.x - 1, y: p.y} as point;
	end if;
end map_neighbors;

function find_path(map map, start_pos point, end_pos point) [point] begin
	var frontier := [start_pos] as [point];
	var reached := false ** map.width ** map.height;
	var origins := {x: 0, y: 0} as point ** map.width ** map.height;
	while length(frontier) > 0 loop
		var new_frontier := [] as [point];
		for i in 0..length(frontier) - 1 loop
			for p in map_neighbors(map, frontier[i]) loop
				if p = end_pos then
					var path := [p];
					var origin := frontier[i];
					while origin <> start_pos loop
						path := [origin] || path;
						origin := origins[origin.y][origin.x];
					end loop;
					return path;
				elsif not reached[p.y][p.x] and not map_is_blocked(map, p) then
					reached[p.y][p.x] := true;
					origins[p.y][p.x] := frontier[i];
					new_frontier := new_frontier || [p];
				end if;
			end loop;
		end loop;
		frontier := new_frontier;
	end loop;
	return [] as [point];
end find_path;

function new_entity(ctx entities [entity], ctx map map, e entity) integer begin
	var entity_id := length(entities);
	entities := entities || [e];
	kindof e.position when some(p) then
		if e.blocks_tile then
			map.blocking_entities[p.y][p.x] := entity_id;
		else
			map.nonblocking_entities[p.y][p.x] := entity_id;
		end if;
	end;
	return entity_id;
end new_entity;

procedure deactivate_entity(ctx entities [entity], ctx map map, entity_id integer) begin
	entities[entity_id].is_active := false;
	if entities[entity_id].blocks_tile then
		kindof entities[entity_id].position when some(p) then
			if map.blocking_entities[p.y][p.x] = entity_id then
				map.blocking_entities[p.y][p.x] := -1;
			end if;
		end;
	end if;
end deactivate_entity;

function spawn_player(ctx entities [entity], ctx map map) integer begin
	var first_room := map.rooms[0];
	var player_pos := {x: random(first_room.x1 + 1, first_room.x2), y: random(first_room.y1 + 1, first_room.y2)} as point;
	var player_id := new_entity(ctx entities, ctx map, {
		name: 'Player',
		is_active: true,
		position: entity_position_some(player_pos),
		display: entity_display_some({glyph: GLYPH_PLAYER, fg_color: ANSI_YELLOW, bg_color: ANSI_BLACK}),
		viewrange: entity_viewrange_some({range: 6, flags: [] as [[boolean]], dirty: true}),
		combat_stat: entity_combatstat_some({max_hp: 100, hp: 100, defense: 5, power: 10}),
		is_monster: false,
		blocks_tile: true,
		item: entity_item_none(),
		potion: entity_potion_none()
	} as entity);
	return player_id;
end spawn_player;

procedure populate_room(ctx entities [entity], ctx map map, room rect) begin
	var monster_num := random(0, 3);
	var spawn_points := [] as [point];
	for i in 1 .. monster_num loop
		var spawn_point := {x: random(room.x1 + 1, room.x2), y: random(room.y1 + 1, room.y2)} as point;
		if not point_in_array(spawn_point, spawn_points) then
			var monster_type := random(0, 1);
			var glyph := case when monster_type = 0 then 'g' else 'o' end;
			var monster_id := new_entity(ctx entities, ctx map, {
				name: case when monster_type = 0 then 'Gnome' else 'Orc' end,
				is_active: true,
				position: entity_position_some(spawn_point),
				display: entity_display_some({glyph: glyph, fg_color: ANSI_RED, bg_color: ANSI_BLACK}),
				viewrange: entity_viewrange_some({range: 4, flags: [] as [[boolean]], dirty: true}),
				combat_stat: entity_combatstat_some({max_hp: 20, hp: 20, defense: 2, power: 10}),
				is_monster: true,
				blocks_tile: true,
				item: entity_item_none(),
				potion: entity_potion_none()
			} as entity);
			spawn_points := spawn_points || [spawn_point];
		end if;
	end loop;
	var potion_num := random(1, 4);
	for i in 1 .. potion_num loop
		var spawn_point := {x: random(room.x1 + 1, room.x2), y: random(room.y1 + 1, room.y2)} as point;
		if not point_in_array(spawn_point, spawn_points) then
			var potion_id := new_entity(ctx entities, ctx map, {
				name: 'Potion',
				is_active: true,
				position: entity_position_some(spawn_point),
				display: entity_display_some({glyph: 'j', fg_color: ANSI_MAGENTA, bg_color: ANSI_BLACK}),
				viewrange: entity_viewrange_none(),
				combat_stat: entity_combatstat_none(),
				is_monster: false,
				blocks_tile: false,
				item: entity_item_some({owner_id: -1}),
				potion: entity_potion_some({hp: 10})
			} as entity);
			spawn_points := spawn_points || [spawn_point];
		end if;		
	end loop;
end populate_room;

procedure populate_map(ctx entities [entity], ctx map map) begin
	for i in 1 .. length(map.rooms) - 1 loop
		populate_room(ctx entities, ctx map, map.rooms[i]);
	end loop;
end populate_map;


procedure render(ctx screen [[screen_cell]], entities [entity], map map) begin
	for y in 0 .. SCREEN_HEIGHT - 1 loop
		for x in 0 .. SCREEN_WIDTH - 1 loop
			if map.visible_tiles[y][x] or map.revealed_tiles[y][x] then
				screen[y][x] := kindof map.tiles[y][x]
					when floor then FLOOR_SCREEN_CELL
					when wall then WALL_SCREEN_CELL
				end;
				if map.visible_tiles[y][x] then
					var entity_id := map.blocking_entities[y][x];
					if entity_id < 0 or entities[entity_id].display = entity_display_none() then
						entity_id := map.nonblocking_entities[y][x];
					end if;
					if entity_id >= 0 then
						kindof entities[entity_id].display when some(d) then
							screen[y][x].glyph := d.glyph;
							screen[y][x].fg_color := d.fg_color;
							screen[y][x].bg_color := d.bg_color;
						end;
					end if;
				else
					screen[y][x].fg_color := ANSI_WHITE;
				end if;
			else
				screen[y][x] := EMPTY_SCREEN_CELL;
			end if;
		end loop;
	end loop;	
end render;

function screen_line_to_text(line [screen_cell]) text begin
	var t := ansi_color(ANSI_WHITE, ANSI_BLACK);
	var last_fg := ANSI_WHITE;
	var last_bg := ANSI_BLACK;
	for i in 0 .. length(line) - 1 loop
		var r := line[i];
		if r.fg_color <> last_fg or r.bg_color <> last_bg then
			t := t || ansi_color(r.fg_color, r.bg_color);
			last_fg := r.fg_color;
			last_bg := r.bg_color;
		end if;
		t := t || r.glyph;
	end loop;
	return t;
end screen_line_to_text;

procedure display(screen [[screen_cell]], player entity, messages [text]) begin
	for i in 0 .. length(screen) - 1 loop
		if i = 0 then
			print(ANSI_HIDE_CURSOR || ANSI_CLEAR_TERMINAL || screen_line_to_text(screen[i]) || ANSI_CR);			
		else
			print(screen_line_to_text(screen[i]) || ANSI_CR);
		end if;
	end loop;
	kindof player.combat_stat when some(cs) then
		var status_line := 'Health: ' || text(cs.hp) || '/' || text(cs.max_hp);
		status_line := status_line || text((char_code(' ', 0) as char) ** (SCREEN_WIDTH - length(status_line)));
		write(ansi_color(ANSI_YELLOW, ANSI_BLUE) || status_line || ansi_color(ANSI_WHITE, ANSI_BLACK));
	end;
	for i in max(0, length(messages) - 3) .. length(messages) - 1 loop
		write(ANSI_CR || ANSI_LF || messages[i]);
	end loop;
end display;

procedure move_entity(ctx entities [entity], map map, entity_id integer, pos point) begin
	kindof entities[entity_id].position when some(old_pos) then
		if not map_is_blocked(map, pos) then
			if map.blocking_entities[old_pos.y][old_pos.x] = entity_id then
				map.blocking_entities[old_pos.y][old_pos.x] := -1;
			end if;
			entities[entity_id].position := entity_position_some(pos);
			if entities[entity_id].blocks_tile then
				map.blocking_entities[pos.y][pos.x] := entity_id;
			end if;
			kindof entities[entity_id].viewrange when some(vr) then
				vr.dirty := true;
				entities[entity_id].viewrange := entity_viewrange_some(vr);
			end;
		end if;
	end;
end move_entity;

procedure attack_entity(ctx entities [entity], ctx map map, ctx messages [text], attacker_id integer, target_id integer) begin
	var attacker := entities[attacker_id];
	var target := entities[target_id];
	kindof attacker.combat_stat when some(attacker_stat) then
		kindof target.combat_stat when some(target_stat) then
			var damage := attacker_stat.power - target_stat.defense;
			if damage < 0 then
				damage := 0;
			end if;
			target_stat.hp := target_stat.hp - damage;
			entities[target_id].combat_stat := entity_combatstat_some(target_stat);
			add_message(ctx messages, attacker.name || ' dealt ' || text(damage) || ' damage to ' || target.name);
			if target_stat.hp <= 0 then
				deactivate_entity(ctx entities, ctx map, target_id);
			end if;
		end;
	end;
end attack_entity;

procedure move_player(ctx entities [entity], ctx map map, ctx messages [text], player_id integer, dx integer, dy integer) begin
	kindof entities[player_id].position when some(p) then
		var new_pos := {x: p.x + dx, y: p.y + dy} as point;
		var target_entity_id := map.blocking_entities[new_pos.y][new_pos.x];
		if target_entity_id <> -1 then
			attack_entity(ctx entities, ctx map, ctx messages, player_id, target_entity_id);
		else
			move_entity(ctx entities, map, player_id, {x: p.x + dx, y: p.y + dy} as point);
		end if;
	end;
end move_player;

procedure pickup_item(ctx entities [entity], ctx messages [text], ctx map map, player_id integer) begin
	kindof entities[player_id].position when some(p) then
		var picked_id := map.nonblocking_entities[p.y][p.x];
		if picked_id = -1 then
			add_message(ctx messages, 'Nothing to pick');
		else
			kindof entities[picked_id].item
			when some(item) then
				map.nonblocking_entities[p.y][p.x] := -1;
				item.owner_id := player_id;
				entities[picked_id].item := entity_item_some(item);
				entities[picked_id].position := entity_position_none();
				map.nonblocking_entities[p.y][p.x] := -1;
				add_message(ctx messages, entities[player_id].name || ' picked ' || entities[picked_id].name);
			else
				add_message(ctx messages, 'You can''t pick ' || entities[picked_id].name);
			end;
		end if;
	end;	
end pickup_item;

procedure viewrange_tick(ctx entities [entity], ctx map map, player_id integer) begin
	for i in 0 .. length(entities) - 1 loop
		const entity := entities[i];
		if entity.is_active then
			kindof entity.viewrange when some(r) then
				if r.dirty then
					kindof entity.position when some(p) then
						r.flags := visible_tile_flags(map.tiles, p.x, p.y, r.range);
						r.dirty := false;
						entities[i].viewrange := entity_viewrange_some(r);
						if i = player_id then
							for y in 0 .. map.height - 1 loop
								for x in 0 .. map.width - 1 loop
									map.visible_tiles[y][x] := false;
								end loop;
							end loop;
							for y in 0 .. 2 * r.range loop
								for x in 0 .. 2 * r.range loop
									var map_y := p.y + y - r.range;
									var map_x := p.x + x - r.range;
									if r.flags[y][x] and map_x >= 0 and map_x < map.width and map_y >= 0 and map_y < map.height then
										map.revealed_tiles[map_y][map_x] := true;
										map.visible_tiles[map_y][map_x] := true;
									end if;
								end loop;
							end loop; 
						end if;
					end;
				end if;
			end;
		end if;
	end loop;
end viewrange_tick;

procedure monster_tick(ctx entities [entity], ctx map map, ctx messages [text], player_id integer) begin
	for i in 0 .. length(entities) - 1 loop
		const entity := entities[i];
		if entity.is_active and entity.is_monster then
			kindof entity.position when some(p) then
				kindof entities[player_id].position when some(player_pos) then
					if entities[player_id].is_active and in_viewrange(player_pos, entities[i]) then
						var path := find_path(map, p, player_pos);
						if length(path) > 0 then
							var next_pos := path[0];
							if next_pos = player_pos then
								attack_entity(ctx entities, ctx map, ctx messages, i, player_id);
							elsif not map_is_blocked(map, next_pos) then
								add_message(ctx messages, entity.name || ': don''t run coward');
								move_entity(ctx entities, map, i, next_pos);
							end if;
						else
							add_message(ctx messages, entity.name || ': come here if you''re a man');
						end if;
					end if;
				end;
			end;
		end if;
	end loop;	
end monster_tick;

procedure entity_use_item(ctx entities [entity], ctx messages [text], entity_id integer, item_id integer) begin
	kindof entities[item_id].potion when some(p) then
		kindof entities[entity_id].combat_stat when some(cs) then
			cs.hp := cs.hp + p.hp;
			entities[entity_id].combat_stat := entity_combatstat_some(cs);
			entities[item_id].is_active := false;
			entities[item_id].item := entity_item_some({owner_id: -1});
			add_message(ctx messages, entities[entity_id].name || ' used ' || entities[item_id].name);
		end;
	end;
end entity_use_item;

procedure inventory_loop(ctx entities [entity], ctx messages [text], player_id integer) begin
	while true loop
		var items := [] as [integer];
		for i in 0 .. length(entities) - 1 loop
			kindof entities[i].item when some(item) then
				if item.owner_id = player_id then
					items := items || [i];
				end if;
			end;
		end loop;
		print(ANSI_HIDE_CURSOR || ANSI_CLEAR_TERMINAL || 'Inventory (' || text(length(items)) || ' items):' || ANSI_CR);			
		for i in 0 .. length(items) - 1 loop
			print(text(i + 1) || ': ' || entities[items[i]].name || ANSI_CR);
		end loop;
		print('x: Exit inventory' || ANSI_CR);
		var input := get_char();
		exit when input = CHAR_QUIT;
		var item_id := input as integer - char_code('1', 0);
		if item_id >= 0 and item_id < 9 and item_id < length(items) then
			entity_use_item(ctx entities, ctx messages, player_id, items[item_id]);
			exit;
		end if;
	end loop;
end inventory_loop;

procedure game_over_loop() begin
	print(ANSI_HIDE_CURSOR || ANSI_CLEAR_TERMINAL || 'You died, game over.' || ANSI_CR);			
	var input := get_char();
end game_over_loop;

procedure main_loop() begin
	var entities := [] as [entity];
	var screen := EMPTY_SCREEN_CELL ** SCREEN_WIDTH ** SCREEN_HEIGHT;
	var messages := [] as [text];
	var map := make_map(SCREEN_WIDTH, SCREEN_HEIGHT);
	var player_id := spawn_player(ctx entities, ctx map);
	populate_map(ctx entities, ctx map);
	while true loop
		viewrange_tick(ctx entities, ctx map, player_id);
		monster_tick(ctx entities, ctx map, ctx messages, player_id);
		if not entities[player_id].is_active then
			game_over_loop();
			exit;
		end if;
		render(ctx screen, entities, map);
		display(screen, entities[player_id], messages);
		var input := get_char();
		if input = CHAR_UP then
			move_player(ctx entities, ctx map, ctx messages, player_id, 0, -1);
		elsif input = CHAR_DOWN then
			move_player(ctx entities, ctx map, ctx messages, player_id, 0, 1);
		elsif input = CHAR_LEFT then
			move_player(ctx entities, ctx map, ctx messages, player_id, -1, 0);
		elsif input = CHAR_RIGHT then
			move_player(ctx entities, ctx map, ctx messages, player_id, 1, 0);
		elsif input = CHAR_UPRIGHT then
			move_player(ctx entities, ctx map, ctx messages, player_id, 1, -1);
		elsif input = CHAR_UPLEFT then
			move_player(ctx entities, ctx map, ctx messages, player_id, -1, -1);
		elsif input = CHAR_DOWNRIGHT then
			move_player(ctx entities, ctx map, ctx messages, player_id, 1, 1);
		elsif input = CHAR_DOWNLEFT then
			move_player(ctx entities, ctx map, ctx messages, player_id, -1, 1);
		elsif input = CHAR_PICKUP then
			pickup_item(ctx entities, ctx messages, ctx map, player_id);
		elsif input = CHAR_INVENTORY then
			inventory_loop(ctx entities, ctx messages, player_id);
		elsif input = CHAR_QUIT then
			exit;
		end if;
	end loop;
end main_loop;

main_loop();



