var input := '
Blueprint 1: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 16 clay. Each geode robot costs 3 ore and 9 obsidian.
Blueprint 2: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 3 ore and 19 obsidian.
Blueprint 3: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 14 clay. Each geode robot costs 4 ore and 19 obsidian.
Blueprint 4: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 3 ore and 8 obsidian.
Blueprint 5: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 4 ore and 9 obsidian.
Blueprint 6: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 7 clay. Each geode robot costs 3 ore and 20 obsidian.
Blueprint 7: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 19 clay. Each geode robot costs 2 ore and 18 obsidian.
Blueprint 8: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 17 clay. Each geode robot costs 3 ore and 19 obsidian.
Blueprint 9: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 3 ore and 8 obsidian.
Blueprint 10: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 14 clay. Each geode robot costs 4 ore and 11 obsidian.
Blueprint 11: Each ore robot costs 2 ore. Each clay robot costs 2 ore. Each obsidian robot costs 2 ore and 15 clay. Each geode robot costs 2 ore and 7 obsidian.
Blueprint 12: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 19 clay. Each geode robot costs 4 ore and 8 obsidian.
Blueprint 13: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 16 clay. Each geode robot costs 2 ore and 9 obsidian.
Blueprint 14: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 15 clay. Each geode robot costs 3 ore and 16 obsidian.
Blueprint 15: Each ore robot costs 4 ore. Each clay robot costs 3 ore. Each obsidian robot costs 2 ore and 20 clay. Each geode robot costs 2 ore and 9 obsidian.
Blueprint 16: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 3 ore and 19 obsidian.
Blueprint 17: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 9 clay. Each geode robot costs 3 ore and 15 obsidian.
Blueprint 18: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 6 clay. Each geode robot costs 2 ore and 20 obsidian.
Blueprint 19: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 15 clay. Each geode robot costs 4 ore and 20 obsidian.
Blueprint 20: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 11 clay. Each geode robot costs 3 ore and 14 obsidian.
Blueprint 21: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 19 clay. Each geode robot costs 4 ore and 11 obsidian.
Blueprint 22: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 2 ore and 20 clay. Each geode robot costs 4 ore and 7 obsidian.
Blueprint 23: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 9 clay. Each geode robot costs 2 ore and 20 obsidian.
Blueprint 24: Each ore robot costs 2 ore. Each clay robot costs 2 ore. Each obsidian robot costs 2 ore and 17 clay. Each geode robot costs 2 ore and 10 obsidian.
Blueprint 25: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 16 clay. Each geode robot costs 3 ore and 13 obsidian.
Blueprint 26: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 14 clay. Each geode robot costs 4 ore and 10 obsidian.
Blueprint 27: Each ore robot costs 3 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 12 obsidian.
Blueprint 28: Each ore robot costs 3 ore. Each clay robot costs 4 ore. Each obsidian robot costs 4 ore and 18 clay. Each geode robot costs 2 ore and 11 obsidian.
Blueprint 29: Each ore robot costs 4 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 5 clay. Each geode robot costs 4 ore and 11 obsidian.
Blueprint 30: Each ore robot costs 2 ore. Each clay robot costs 4 ore. Each obsidian robot costs 3 ore and 20 clay. Each geode robot costs 2 ore and 17 obsidian.
';

type blueprint {
	ore_ore integer,
	clay_ore integer,
	obs_ore integer,
	obs_clay integer,
	geo_ore integer,
	geo_obs integer,
	min_clay integer,
	min_obs integer
};

var blueprints := [] as [blueprint];

for line in split(input, '
')
loop
	if length(line) > 0 then
		var parts := split(line, ' ');
		blueprints := blueprints || [{
			ore_ore: integer(parts[6]),
			clay_ore: integer(parts[12]),
			obs_ore: integer(parts[18]),
			obs_clay: integer(parts[21]),
			geo_ore: integer(parts[27]),
			geo_obs: integer(parts[30]),
			min_clay: 0,
			min_obs: 0
		} as blueprint];
	end if;
end loop;


type rstate {
	ore integer,
	clay integer,
	obs integer,
	geo integer,
	ore_rob integer,
	clay_rob integer,
	obs_rob integer,
	geo_rob integer
};

const NB_ROUNDS := 24;

const ROB_ROUNDS := [0, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8];

for i in 0 .. last_index(blueprints) loop
	blueprints[i].min_obs := NB_ROUNDS - 1 - ROB_ROUNDS[blueprints[i].geo_obs];
	blueprints[i].min_clay := blueprints[i].min_obs - ROB_ROUNDS[blueprints[i].obs_clay];
end loop;
	
function eval_blueprint(bp blueprint, nb_minutes integer, st rstate) integer begin
	# print(text(bp.ore_ore) || ' ' || text(bp.clay_ore) || ' ' || text(bp.obs_ore) || ' ' || text(bp.obs_clay) || ' ' || text(bp.geo_ore) || ' ' || text(bp.geo_obs));
	
	# print('minute ' || text(nb_minutes));
	# print('  res  ore: ' || text(st.ore) || ', clay: ' || text(st.clay) || ', obs: ' || text(st.obs) || ', geo: ' || text(st.geo)); 
	# print('  rob  ore: ' || text(st.ore_rob) || ', clay: ' || text(st.clay_rob) || ', obs: ' || text(st.obs_rob) || ', geo: ' || text(st.geo_rob)); 
	# var c := get_char();
	
	if nb_minutes = NB_ROUNDS then
		return st.geo + st.geo_rob;
	end if;
	
	# we evaluate all possibilities
	var max_geo := 0;
	var can_do_ore_rob := true;
	var can_do_clay_rob := true;
	var can_do_obs_rob := true;
	var can_do_geo_rob := true;
	
	# do a ore rob
	if 	   (    st.ore_rob >= bp.ore_ore
	        and st.ore_rob >= bp.clay_ore
	        and st.ore_rob >= bp.obs_ore)	        
	    or nb_minutes > NB_ROUNDS - 2
		or (nb_minutes >= bp.min_clay and st.clay_rob = 0)
		or (nb_minutes >= bp.min_obs and st.obs_rob = 0)
	then
		can_do_ore_rob := false;
	else
		var st2 := st;
		var nb_minutes2 := nb_minutes;
		
		if st.ore < bp.ore_ore then
			var nb_wait := (bp.ore_ore - st.ore + st.ore_rob - 1) / st.ore_rob;
			nb_minutes2 := nb_minutes2 + nb_wait;
			if nb_minutes2 > NB_ROUNDS - 2 then
				can_do_ore_rob := false;
			else
				st2.ore := st2.ore + st2.ore_rob * nb_wait;
				st2.clay := st2.clay + st2.clay_rob * nb_wait;
				st2.obs := st2.obs + st2.obs_rob * nb_wait;
				st2.geo := st2.geo + st2.geo_rob * nb_wait;
			end if;
		end if;
		
		if can_do_ore_rob then
			st2.ore := st2.ore - bp.ore_ore;
			
			st2.ore := st2.ore + st2.ore_rob;
			st2.clay := st2.clay + st2.clay_rob;
			st2.obs := st2.obs + st2.obs_rob;
			st2.geo := st2.geo + st2.geo_rob;
			
			st2.ore_rob := st2.ore_rob + 1;		

			var geo := eval_blueprint(bp, nb_minutes2 + 1, st2);
			
			if geo > max_geo then
				max_geo := geo;
			end if;
		end if;
	end if;
	
	# do a clay rob
	if     st.clay_rob >= bp.obs_clay
	    or nb_minutes > NB_ROUNDS - 2
		or (nb_minutes > bp.min_clay and st.clay_rob = 0)
		or (nb_minutes >= bp.min_obs and st.obs_rob = 0)	
	then
		can_do_clay_rob := false; 
	else
		var st2 := st;
		var nb_minutes2 := nb_minutes;

		if st.ore < bp.clay_ore then
			var nb_wait := (bp.clay_ore - st.ore + st.ore_rob - 1) / st.ore_rob;
			nb_minutes2 := nb_minutes2 + nb_wait;
			if nb_minutes2 > NB_ROUNDS - 2 then
				can_do_clay_rob := false;
			else
				st2.ore := st2.ore + st2.ore_rob * nb_wait;
				st2.clay := st2.clay + st2.clay_rob * nb_wait;
				st2.obs := st2.obs + st2.obs_rob * nb_wait;
				st2.geo := st2.geo + st2.geo_rob * nb_wait;
			end if;
		end if;
		
		if can_do_clay_rob then				
			st2.ore := st2.ore - bp.clay_ore;
			
			st2.ore := st2.ore + st2.ore_rob;
			st2.clay := st2.clay + st2.clay_rob;
			st2.obs := st2.obs + st2.obs_rob;
			st2.geo := st2.geo + st2.geo_rob;
			
			st2.clay_rob := st2.clay_rob + 1;		

			var geo := eval_blueprint(bp, nb_minutes2 + 1, st2);
			
			if geo > max_geo then
				max_geo := geo;
			end if;
		end if;
	end if;
	
	# do a obs rob
	if nb_minutes > NB_ROUNDS - 2
		or (nb_minutes >= bp.min_clay and st.clay_rob = 0)
		or (nb_minutes > bp.min_obs and st.obs_rob = 0)		
	then
		can_do_obs_rob := false;
	else
		var st2 := st;
		var nb_minutes2 := nb_minutes;

		if st.ore < bp.obs_ore or st.clay < bp.obs_clay then
			if st.clay_rob = 0 then
				can_do_obs_rob := false;
			else
				var nb_wait := (bp.obs_ore - st.ore + st.ore_rob - 1) / st.ore_rob;
				var nb_wait2 := (bp.obs_clay - st.clay + st.clay_rob - 1) / st.clay_rob;
				if nb_wait2 > nb_wait then
					nb_wait := nb_wait2;
				end if;
				nb_minutes2 := nb_minutes2 + nb_wait;
				if nb_minutes2 > NB_ROUNDS - 2 then
					can_do_obs_rob := false;
				else
					st2.ore := st2.ore + st2.ore_rob * nb_wait;
					st2.clay := st2.clay + st2.clay_rob * nb_wait;
					st2.obs := st2.obs + st2.obs_rob * nb_wait;
					st2.geo := st2.geo + st2.geo_rob * nb_wait;
				end if;
			end if;
		end if;
		
		if can_do_obs_rob then
			st2.ore := st2.ore - bp.obs_ore;
			st2.clay := st2.clay - bp.obs_clay;
			
			st2.ore := st2.ore + st2.ore_rob;
			st2.clay := st2.clay + st2.clay_rob;
			st2.obs := st2.obs + st2.obs_rob;
			st2.geo := st2.geo + st2.geo_rob;		

			st2.obs_rob := st2.obs_rob + 1;

			var geo := eval_blueprint(bp, nb_minutes2 + 1, st2);
		
			if geo > max_geo then
				max_geo := geo;
			end if;
		end if;
	end if;
	
	# do a geo rob
	begin
		var st2 := st;
		var nb_minutes2 := nb_minutes;

		if st.ore < bp.geo_ore or st.obs < bp.geo_obs then
			if st.obs_rob = 0 then
				can_do_geo_rob := false;
			else
				var nb_wait := (bp.geo_ore - st.ore + st.ore_rob - 1) / st.ore_rob;
				var nb_wait2 := (bp.geo_obs - st.obs + st.obs_rob - 1) / st.obs_rob;
				if nb_wait2 > nb_wait then
					nb_wait := nb_wait2;
				end if;
				nb_minutes2 := nb_minutes2 + nb_wait;
				if nb_minutes2 >= NB_ROUNDS then
					can_do_geo_rob := false;
				else
					st2.ore := st2.ore + st2.ore_rob * nb_wait;
					st2.clay := st2.clay + st2.clay_rob * nb_wait;
					st2.obs := st2.obs + st2.obs_rob * nb_wait;
					st2.geo := st2.geo + st2.geo_rob * nb_wait;
				end if;
			end if;
		end if;
		
		if can_do_geo_rob then
			st2.ore := st2.ore - bp.geo_ore;
			st2.obs := st2.obs - bp.geo_obs;
			
			st2.ore := st2.ore + st2.ore_rob;
			st2.clay := st2.clay + st2.clay_rob;
			st2.obs := st2.obs + st2.obs_rob;
			st2.geo := st2.geo + st2.geo_rob;		

			st2.geo_rob := st2.geo_rob + 1;

			var geo := eval_blueprint(bp, nb_minutes2 + 1, st2);
		
			if geo > max_geo then
				max_geo := geo;
			end if;
		end if;
	end;
	
	if not can_do_ore_rob and
	   not can_do_clay_rob and
	   not can_do_obs_rob and
	   not can_do_geo_rob
	then
		return st.geo + (NB_ROUNDS - nb_minutes + 1) * st.geo_rob;
	end if;
	
	return max_geo;
end eval_blueprint;

var init_state := {
	ore: 0,
	clay: 0,
	obs: 0,
	geo: 0,
	ore_rob: 1,
	clay_rob: 0,
	obs_rob: 0,
	geo_rob: 0
} as rstate;

var sum := 0;
for i in 0 .. last_index(blueprints) loop
	var v := eval_blueprint(blueprints[i], 1, init_state);
	print('blueprint ' || text(i) || ': ' || text(v));
	sum := sum + v * (i + 1);
end loop;

print('Checksum: ' || text(sum));

if sum = 1147 then
	print('Correct');
else
	print('Error');
end if;

