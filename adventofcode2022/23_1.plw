var input := '
#.....###.....#.###....#.#..#...###..#..#....#.#.......#.##.###.####.#...#
##.#..#.#.#.#..##.##......####.##.##...#...##..#.....####..#.#..###...#..#
.#.###...##.#.###.#..##.#..#.###..#.###..#..##.##.########....#...#...##..
##.#...#.##..#...############.#..#..##.#.#.#.####....#.##....#...##.####..
##.#.###....#.##.##.#.####....####.###.#..#...#####.#..###.#.###.....#.#..
.#..#####.#...###..#..#..###..#.#...#.###.###.#.##.#.....#.#.##.##.#.....#
#.#...##..#.###.##.##.##........#.#.##....#..##...#..#####..##..#....#.##.
###....###..#..#.....#..####...###.#.#....#.#.#.#..##.###.#..#..######....
#..#..#...#.#.#.#....#.#.##.#.#.#.#######..#.##...##..####.###.##.#.###.#.
###.##...#...##..#...#.##.##.##.#.#.#.#..#.#.#...###....#.#.##.....###....
....##...##.#.##.#..#...#..#...#.##.#...##..#...#.##...##..#.#.##..#.#....
##.....#.##....##...###.#.#####...####.###....#######.#.....##.#.#..#.##..
.......#####..#.###.#...###..##.##..#.#.###...#..#..##..##.#..#.#..#..##..
#.#..###.#.#.#..#####....###.#..#.#.###...##....#.#.####.##...#....#.#.#..
..#.....##.#.#..###.#...######.##....#####.###...####.#####.##..#...###.#.
.#.####.......##.###.#..#####.#######...##.#.###..#......##..#...#.#.#.#..
##.###.....#.##..#.#.#.#.#..##....####.#...#.###...#.####..#.#......#..#.#
####.......##....######.#.#.#.#..#.##.###.....#...#.#..#.#.###..#.###..##.
##..###..###...##...#.#..##.#..#.#.#.#...#..##..#.#..#....#...##...##.###.
#....#.....####..##.#........#.#..#...#...##...##.#..#..#.#.#.#..#......##
#.#.#..#..##.####......#..#####.#.##..##..##...####.###..#####...#.#..##.#
####.#.##.....#..####.##.####.#####...#####.#....##....#..#..#.###.#.##.#.
..#.##.##.##.#.#...#.###..#.##.######..#..#...#.###..###.###.#.#.#..#.#.#.
..##..##..#..#####...##.###...###.###########.#..#######..#.#.#....#######
#.###.#.##..######.###..##...#..##.#.###..##..#..#.#.#..#.##.#.#..#.#.####
#....#.##...##..#.#.####.......#.#.###.#......###......#..##...#..#.####..
##.####..######.####....#.###.##..#.#.##.#.#..##.#..##.#.##.#.##.#####..#.
#######.####.#.##.########..#..###.###.###...##......#..##.#.#####...#...#
#..##.#.#..######.##.##..#....#..##.#.#####.##..#.##.##..#..###.#.##..##.#
..#.#.#..##...####....##.#.#..####..#.#####.###.#..##.....#..##..##.#.#..#
#.###..####....####..###.#.####.#.##....#.##.###.##.###########..#..###.##
..##.##.##.#.####......####...##..#....#####...#.#....#####..#.#####..##.#
#..##...#...###.#..#.##.##.#.#.#....#..##.###.###.##........#..####.##...#
...#####.####..###........#.##...##....#...#..#...##..###..#####...######.
..#..##..#.......##.#....###..######.##.####.##..##.....##.###.#.#####.#.#
..#.#...#.......##.##.###..#.#.#...#########..###...#....#...#.###.#..#.##
#.#..#..######..#........##..###.##..#.##.#.#..#.#....##.#.#..#.#...#.#.#.
#....#.#.#####.###......#..#..##.##...#......##..#.###..##.####.######.#..
#..#.....#..####.#...##.####..######.#.#.###..##.....##.#.##.######.#.####
....###.#######..#.##..########.....#.#..##..#.#..#.##....#.#..#..#..##.#.
#..#.##.#.#.#.##.#.#.....#..#..#...#..##..##.#..#.##.#.#.#...##.##.#...#.#
.#.######.#..##.#.##.....##.#.##.#.#....######..##..##.#...#...#.#.###..##
.#.#..#..#..#..##.#.####.#.####.#....#.#.###.###.#..###..##.#...#.###.###.
##.#.##..###.####.#.#.###.#......#####.###.######.#..######.#...#.#.####..
###.####..#.###....#.....#.#.##.#.##.#####...##.#...#####.#.###.#..##.....
##..#.#..#.####.#.####...###.#.##..#####.#..###...#####.####..#...#.##.#.#
..##.#####..##.#####..#..#..#..#...##..#.###..##.#....##...#...#.#.##...##
##...#.##..#.##...#.#.####..#.#...####..#.##.#.#...#####.##..#######.##...
.#..####.##...#.#...##..#..###.#####.#.#.#.#..##..##.###.....#...#..####..
.##..#...#.###.####.#.#...#...#####..#..#.#.##...#...##..#.#..#.#.#.###..#
###.##.####.##....#.#..#.##.##..###.####..##..#.####.....#.#.###..#.######
#.##.#.##.#..#..#.#......##.#.##.#..#.#.#.....###.....#......###....#..###
.#..#..#....#..#.#...#..#..##......##...###.###.##...#...#.....#...###.###
#..##..#..##.#....###...#......#.######..#.###..#.#....#......#.##..#.####
.#...##.#..#####..##...#####.#....#######....#.....###....#..###.##..#..#.
.###.#.##..#..#..##..#....#...#.##.##.##.#..#...##..#..##...##..######.###
#....#.#####.###..#.#.......##..##...##..#.###..#####.#..#..##.#..#....##.
##..#......#######...#.##.###..#.....##..#.####.###.##.#..####.#.#####.##.
..#....###.#........#..######.#...##.......##.#.###.##.#...#.##....##.#...
###.....#..##.####.#..###..#..#####.##.##.#######.#.####.####......#.##.##
..#...#...#######.#.####....#.####..#..#..##.#.#.###..#.#####.##.#.....#.#
###.#.#..#.####.##...#.#####.##.####..#.#.###.#..#...#..#########.###.#.##
..######.########..###.#.#.###.#.#.#.#.####.#...#..##...##.#####..##...#.#
...#.#...##.#....####.###..#..#..#..##..###.##..#.#....#..#...######.##.##
#####.##..#..##..#####.#..#..#..###.##..##...###....#.###.#.#.##...###..##
..#.##.#....####..#.#..###.#.#..##...#..##....####.............#.#.#..#.##
.###...#.#....#..#.######....###.....#..#...##..##.#....##...#.###....###.
.#.####..#.#.###..###.#..###.#..#..#######....###.......#....###.#...#.###
###.#.###.#..#.#..###.#.....#.##..#.#.####..###...#...#####...####...##...
.#..##..#.##..#..##..######.###.##.....##..#..#.##...####.#...#####..###.#
..##...######.#.#...#.#.#####.##.##...##.##....#.#####...###....#.#.#.#..#
##..#.#.#....##.####.#.##.##.#.#.##......#...##..##...##.#####...#..#..##.
...####.#..###....#.###.#.#.........#....####..#........#.###..####.##...#
.##.##.#####...##.....##.#..#####..##.....#....##......#.#..###..###..##..
';

const CHAR_FLOOR := '.' as char;
const CHAR_WALL := '#' as char;
const CHAR_BLOCKED := 'X' as char;
const NL := '
';

var positions := [] as [{x integer, y integer}];

begin
	var y := 0;
	for line in split(input, NL) loop
		if length(line) > 0 then
			for x in 0 .. length(line) - 1 loop  
				if char_at(line, x) = CHAR_WALL then
					positions := positions || [{x: x, y: y}];
				end if;
			end loop;
			y := y + 1;
		end if;
	end loop;
end;

function rect_from_pos(pos [{x integer, y integer}]) {x integer, y integer, width integer, height integer} begin
	if length(pos) = 0 then
		return {x: 0, y: 0, width: 0, height: 0};
	end if;
	var min_x := pos[0].x;
	var min_y := pos[0].y;
	var max_x := min_x;
	var max_y := min_y;
	for i in 1 .. last_index(pos) loop
		var p := pos[i];
		if p.x < min_x then
			min_x := p.x;
		elsif p.x > max_x then
			max_x := p.x;
		end if;
		if p.y < min_y then
			min_y := p.y;
		elsif p.y > max_y then
			max_y := p.y;
		end if;
	end loop;
	return {x: min_x, y: min_y, width: max_x - min_x + 1, height: max_y - min_y + 1};
end rect_from_pos;

type posmap {
	rect {x integer, y integer, width integer, height integer},
	count [[integer]]
};	

function map_positions(pos [{x integer, y integer}]) posmap begin
	var rect := rect_from_pos(pos);
	var count := 0 ** rect.width ** rect.height;
	for p in pos loop
		var rx := p.x - rect.x;
		var ry := p.y - rect.y;
		count[ry][rx] := count[ry][rx] + 1;
	end loop;
	return {rect: rect, count: count} as posmap;
end map_positions;

const DIRECTIONS := [
	{x: 0, y: -1},
	{x: 0, y: 1},
	{x: -1, y: 0},
	{x: 1, y: 0}
];

const DIR_COUNT := 4;

function is_clear(
	direction_index integer,
	pos {x integer, y integer},
	map posmap
) boolean
begin
	var direction := DIRECTIONS[direction_index];
	var rx := pos.x - map.rect.x;
	var ry := pos.y - map.rect.y;
	for offset in -1 .. 1 loop
		var nx := rx + direction.x + case direction.x when 0 then offset else 0 end;
		var ny := ry + direction.y + case direction.y when 0 then offset else 0 end;
		if nx >= 0 and nx < map.rect.width and ny >= 0 and ny < map.rect.height and map.count[ny][nx] > 0 then
			return false;
		end if;
	end loop;
	return true;
end is_clear;

function is_all_clear(
	pos {x integer, y integer},
	map posmap
) boolean
begin
	for dir in 0 .. DIR_COUNT - 1 loop
		if not is_clear(dir, pos, map) then
			return false;
		end if;
	end loop;
	return true;
end is_all_clear;

procedure print_positions(pos [{x integer, y integer}]) begin
	var map := map_positions(pos);
	for y in 0 .. map.rect.height - 1 loop
		var line := CHAR_FLOOR ** map.rect.width;
		for x in 0 .. map.rect.width - 1 loop
			if map.count[y][x] = 1 then
				line[x] := CHAR_WALL;
			elsif map.count[y][x] > 1 then
				line[x] := CHAR_BLOCKED;
			end if;
		end loop;
		print(text(line));
	end loop;
	print('');
end print_positions;

var dir_index := 0;

for i in 1 .. 10 loop
	var map := map_positions(positions);
	var next_positions := positions;
	for i in 0 .. last_index(positions) loop
		var p := positions[i];
		if not is_all_clear(p, map) then
			for di in 0 .. DIR_COUNT - 1 loop
				var dir := (dir_index + di) % DIR_COUNT;
				if is_clear(dir, p,  map) then
					next_positions[i].x := p.x + DIRECTIONS[dir].x;
					next_positions[i].y := p.y + DIRECTIONS[dir].y;
					exit;
				end if;
			end loop;
		end if;
	end loop;
	var next_map := map_positions(next_positions);
	for i in 0 .. last_index(next_positions) loop
		var p := next_positions[i];
		if next_map.count[p.y - next_map.rect.y][p.x - next_map.rect.x] > 1 then
			next_positions[i] := positions[i];
		end if;
	end loop;
	positions := next_positions;
	dir_index := (dir_index + 1) % DIR_COUNT;
end loop;

var rect := rect_from_pos(positions);
var sum := rect.width * rect.height - length(positions);
print(text(sum));

if sum = 4116 then
	print('Correct');
else
	print('Error');
end if;
		
